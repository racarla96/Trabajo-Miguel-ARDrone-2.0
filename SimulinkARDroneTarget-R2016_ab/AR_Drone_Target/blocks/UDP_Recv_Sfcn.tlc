%% file : UDP_Recv_Sfcn.tlc
%% 
%% Description:
%%   Simulink Coder TLC Code Generation file for UDP_Recv_Sfcn
%% 
%% Simulink version      : 8.8 (R2016b) 25-Aug-2016
%% TLC file generated on : 27-Apr-2022 17:44:31

/%
     %%%-MATLAB_Construction_Commands_Start
     def = legacy_code('initialize');
     def.SFunctionName = 'UDP_Recv_Sfcn';
     def.OutputFcnSpec = 'int32 y1 = udp_recv(int32 u1, double u2, uint8 y2[32])';
     def.TerminateFcnSpec = 'void udp_recv_close()';
     def.HeaderFiles = {'udp_recv.h', 'udp.h'};
     def.SourceFiles = {'udp_recv.c'};
     def.SrcPaths = {'.'};
     def.SampleTime = 'parameterized';
     def.Options.useTlcWithAccel = false;
     legacy_code('sfcn_tlc_generate', def);
     %%%-MATLAB_Construction_Commands_End
%/

%implements UDP_Recv_Sfcn "C"

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup (block, system) void

    %% The Target Language must be C
    %if ::GenCPP==1 && !IsModelReferenceSimTarget()
        %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C Target Language")>
    %endif

    %<LibAddToCommonIncludes("udp_recv.h")>
    %<LibAddToCommonIncludes("udp.h")>
    %<SLibAddToStaticSources("udp_recv.c")>
%endfunction

%% Function: BlockInstanceSetup ===========================================
%function BlockInstanceSetup (block, system) void
    %<LibBlockSetIsExpressionCompliant(block)>
%endfunction

%% Function: Outputs ======================================================
%function Outputs (block, system) Output
    %assign y1_val = LibBlockOutputSignal(0, "", "", 0)
    %assign u1_val = LibBlockInputSignal(0, "", "", 0)
    %assign u2_val = LibBlockInputSignal(1, "", "", 0)
    %assign y2_ptr = LibBlockOutputSignalAddr(1, "", "", 0)
    %% 
    %<y1_val> = udp_recv(%<u1_val>, %<u2_val>, %<y2_ptr>);
%endfunction

%% Function: Terminate ====================================================
%function Terminate (block, system) Output
    %% 
    udp_recv_close();
%endfunction

%% [EOF]
